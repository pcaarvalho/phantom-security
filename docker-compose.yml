version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: phantom_postgres
    environment:
      POSTGRES_USER: phantom_user
      POSTGRES_PASSWORD: phantom_password
      POSTGRES_DB: phantom_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U phantom_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: phantom_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: phantom_backend
    environment:
      - DATABASE_URL=postgresql://phantom_user:phantom_password@postgres:5432/phantom_db
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - JWT_SECRET=${JWT_SECRET:-default-jwt-secret-change-this}
      - SHODAN_API_KEY=${SHODAN_API_KEY}
      - BACKEND_CORS_ORIGINS=["http://localhost:3000"]
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Celery Worker
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: phantom_celery_worker
    environment:
      - DATABASE_URL=postgresql://phantom_user:phantom_password@postgres:5432/phantom_db
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - JWT_SECRET=${JWT_SECRET:-default-jwt-secret-change-this}
      - SHODAN_API_KEY=${SHODAN_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
    command: celery -A app.tasks.celery_app worker --loglevel=info

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: phantom_frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm run dev

  # Optional: Celery Flower for monitoring
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: phantom_flower
    environment:
      - REDIS_URL=redis://redis:6379
    ports:
      - "5555:5555"
    depends_on:
      - redis
    command: celery -A app.tasks.celery_app flower --port=5555

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: phantom_network